generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id             String
  name           String?
  fatherName     String?
  dateOfBirth    DateTime
  religion       String?
  gender         String?
  cnicNumber     String         @unique
  profilePicture String?
  email          String?
  mobileNumber   String?
  city           String?
  stateProvince  String?
  addressLine1   String?
  instituteName  String?
  others         String?
  rollNo         String?
  Result         Result[]
  Attendance     Attendance[]
  Registration   Registration[]
  attempts       QuizAttempt[]
}

model Category {
  id      Int     @id @default(autoincrement())
  catName String  @unique
  Grade   Grade[]
  Exam    Exam[]
}

model QuizAttempt {
  id          String    @id @default(cuid())
  quizId      String
  studentId   String
  student     Student   @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)
  studentName String
  startTime   DateTime  @default(now())
  endTime     DateTime?
  isCompleted Boolean   @default(false)
  isSubmitted Boolean   @default(false)
  totalScore  Int?
  timeSpent   Int? // in seconds

  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     Answer[]
  submittedAt DateTime?

  @@unique([quizId, studentId])
  @@map("quiz_attempts")
}

model Answer {
  id           String   @id @default(cuid())
  attemptId    String
  questionId   String
  answerText   String
  isCorrect    Boolean?
  pointsEarned Int      @default(0)
  answeredAt   DateTime @default(now())

  attempt          QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  QuestionOption   QuestionOption? @relation(fields: [questionOptionId], references: [id])
  questionOptionId String?

  @@unique([attemptId, questionId])
  @@map("answers")
}

model Grade {
  id         Int      @id @default(autoincrement())
  level      String   @unique
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  Exam Exam[]
}

enum RegistrationStatus {
  APPROVED
  PENDING
  REJECTED
}

model Registration {
  id                 Int                  @id @default(autoincrement())
  olympiadCategory   String?
  catGrade           String?
  bankName           String?
  accountTitle       String?
  accountNumber      String?
  totalAmount        String?
  transactionId      String?
  dateOfPayment      DateTime
  paymentOption      String?
  otherName          String?
  transactionReceipt String?
  applicationId      String?
  status             RegistrationStatus // <- enum used here
  studentId          String
  student            Student              @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)
  registerdAt        DateTime             @default(now())
  exams              ExamOnRegistration[]
}

model ExamOnRegistration {
  examId         String
  registrationId Int

  exam         Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@id([examId, registrationId]) // composite primary key
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique
  Exam Exam[]
}

model Exam {
  id            String     @id @default(uuid())
  title         String
  startTime     DateTime
  endTime       DateTime
  status        ExamStatus @default(NOT_STARTED)
  createdAt     DateTime   @default(now())

  timeLimit     Int        @default(30)   // ⬅️ Added field (e.g., duration in minutes)

  categoryId    Int
  category      Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  gradeId       Int
  grade         Grade                @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  subjectId     Int
  subject       Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  totalMCQ      Int
  totalMarks    Int
  results       Result[]
  attendance    Attendance[]
  registrations ExamOnRegistration[]
  quizzes       Quiz[]
}

model Quiz {
  id             String   @id @default(cuid())
  title          String
  category       String
  grade          String
  subject        String
  totalQuestions Int      @map("total_questions")
  totalMarks     Int      @map("total_marks")
  startDateTime  DateTime @map("start_date_time")
  endDateTime    DateTime @map("end_date_time")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  timeLimit     Int        @default(30)   // ⬅️ Added field (e.g., duration in minutes)

  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId String @unique

  // Relations
  questions   Question[]
  QuizAttempt QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id            String       @id @default(cuid())
  quizId        String       @map("quiz_id")
  type          QuestionType
  text          String
  marks         Float
  correctAnswer String?      @map("correct_answer")
  orderIndex    Int          @map("order_index")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  quiz    Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options QuestionOption[]
  Answer  Answer[]

  @@map("questions")
}

model QuestionOption {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  text       String
  isCorrect  Boolean  @map("is_correct")
  orderIndex Int      @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Answer   Answer[]

  @@map("question_options")
}

enum QuestionType {
  MULTIPLE_CHOICE @map("multiple_choice")
  TRUE_FALSE      @map("true_false")
  SHORT_TEXT      @map("short_text")
  LONG_TEXT       @map("long_text")
  NUMERICAL       @map("numerical")
}

enum ResultStatus {
  NOT_GRADED // Exam submitted, but not yet graded
  PASSED // Student passed the exam
  FAILED // Student failed the exam
  ABSENT // Student did not attend the exam
}

model Result {
  id         Int          @id @default(autoincrement())
  totalScore Int
  score      Int
  grade      String
  status     ResultStatus @default(NOT_GRADED)
  gradedAt   DateTime?
  startTime  DateTime
  endTime    DateTime

  examId    String?
  exam      Exam?   @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentId String
  student   Student @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)
  examId    String?
  exam      Exam?   @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
}

enum ExamStatus {
  NOT_STARTED // Exam has been scheduled but not yet started
  IN_PROGRESS // Exam is currently being taken
  COMPLETED // Exam has been finished by the participant
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
