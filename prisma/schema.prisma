generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id             String
  name           String?
  fatherName     String?
  dateOfBirth    DateTime
  religion       String?
  gender         String?
  cnicNumber     String         @unique
  profilePicture String?
  email          String?
  mobileNumber   String?
  city           String?
  stateProvince  String?
  addressLine1   String?
  instituteName  String?
  others         String?
  rollNo         String?
  Result         Result[]
  Attendance     Attendance[]
  Registration   Registration[]
}

model Category {
  id      Int     @id @default(autoincrement())
  catName String  @unique
  Grade   Grade[]
  Exam    Exam[]
}

model Grade {
  id         Int      @id @default(autoincrement())
  level      String   @unique
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  Exam Exam[]
}

model Registration {
  id                 Int      @id @default(autoincrement())
  olympiadCategory   String?
  catGrade           String?
  bankName           String?
  accountTitle       String?
  accountNumber      String?
  totalAmount        String?
  transactionId      String?
  dateOfPayment      DateTime
  paymentOption      String?
  otherName          String?
  transactionReceipt String?
  applicationId      String?
  status             String?
  ExamId             String?
  studentId          String
  student            Student  @relation(fields: [studentId], references: [cnicNumber])
  registerdAt        DateTime @default(now())
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique
  Exam Exam[]
}

model Exam {
  id        Int        @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  status    ExamStatus @default(NOT_STARTED)

  categoryId Int
  category   Category     @relation(fields: [categoryId], references: [id])
  gradeId    Int
  grade      Grade        @relation(fields: [gradeId], references: [id])
  subjectId  Int
  subject    Subject      @relation(fields: [subjectId], references: [id])
  totalMCQ   Int
  totalMarks Int
  results    Result[]
  attendance Attendance[]
}

enum ResultStatus {
  NOT_GRADED // Exam submitted, but not yet graded
  PASSED // Student passed the exam
  FAILED // Student failed the exam
  ABSENT // Student did not attend the exam
}

model Result {
  id        Int          @id @default(autoincrement())
  score     Int
  status    ResultStatus @default(NOT_GRADED)
  gradedAt  DateTime?
  startTime DateTime
  endTime   DateTime

  examId    Int?
  exam      Exam?   @relation(fields: [examId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [cnicNumber])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [cnicNumber])
  examId    Int
  exam      Exam    @relation(fields: [examId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
}

enum ExamStatus {
  NOT_STARTED // Exam has been scheduled but not yet started
  IN_PROGRESS // Exam is currently being taken
  COMPLETED // Exam has been finished by the participant
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
