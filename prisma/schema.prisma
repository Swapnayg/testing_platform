generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id             String
  name           String?
  fatherName     String?
  dateOfBirth    DateTime
  religion       String?
  gender         String?
  cnicNumber     String         @unique
  profilePicture String?
  email          String?
  mobileNumber   String?
  city           String?
  stateProvince  String?
  addressLine1   String?
  instituteName  String?
  others         String?
  rollNo         String?
  gradeId        Int?
  Attendance     Attendance[]
  Registration   Registration[]
  Result         Result[]
  grade          Grade?         @relation(fields: [gradeId], references: [id])
  attempts       QuizAttempt[]
  user           User?          @relation("StudentToUser", fields: [cnicNumber], references: [cnicNumber])

  @@index([gradeId], map: "Student_gradeId_fkey")
}

model Category {
  id      Int     @id @default(autoincrement())
  catName String  @unique
  Exam    Exam[]
  Grade   Grade[]
}

model QuizAttempt {
  id          String    @id @default(cuid())
  quizId      String
  studentId   String
  studentName String
  startTime   DateTime  @default(now())
  endTime     DateTime?
  isCompleted Boolean   @default(false)
  isSubmitted Boolean   @default(false)
  totalScore  Int?
  timeSpent   Int?
  submittedAt DateTime?
  results     Result[]
  answers     Answer[]
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student     Student   @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)

  @@unique([quizId, studentId])
  @@index([quizId], map: "quiz_attempts_quizId_fkey")
  @@index([studentId], map: "quiz_attempts_studentId_fkey")
  @@map("quiz_attempts")
}

model Answer {
  id               String          @id @default(cuid())
  attemptId        String
  questionId       String
  answerText       String          @db.Text
  isCorrect        Boolean?
  pointsEarned     Int             @default(0)
  answeredAt       DateTime        @default(now())
  questionOptionId String?
  attempt          QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  QuestionOption   QuestionOption? @relation(fields: [questionOptionId], references: [id])

  @@unique([attemptId, questionId])
  @@index([questionId], map: "answers_questionId_fkey")
  @@index([questionOptionId], map: "answers_questionOptionId_fkey")
  @@map("answers")
}

model Grade {
  id            Int            @id @default(autoincrement())
  level         String         @unique
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  students      Student[]
  exams         Exam[] // many-to-many with Exam
  announcements Announcement[] @relation("AnnouncementGrades") // ✅ Add this

  @@index([categoryId], map: "Grade_categoryId_fkey")
}

model Registration {
  id                 Int                  @id @default(autoincrement())
  olympiadCategory   String?
  catGrade           String?
  bankName           String?
  accountTitle       String?
  accountNumber      String?
  totalAmount        String?
  transactionId      String?
  dateOfPayment      DateTime
  paymentOption      String?
  otherName          String?
  transactionReceipt String?
  applicationId      String?
  status             RegistrationStatus
  studentId          String
  registerdAt        DateTime             @default(now())
  exams              ExamOnRegistration[]
  student            Student              @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)

  @@index([studentId], map: "Registration_studentId_fkey")
}

model ExamOnRegistration {
  examId         String
  registrationId Int
  exam           Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@id([examId, registrationId])
  @@index([registrationId], map: "ExamOnRegistration_registrationId_fkey")
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique
  Exam Exam[]
}

model Exam {
  id         String     @id @default(uuid())
  title      String
  startTime  DateTime
  endTime    DateTime
  status     ExamStatus @default(NOT_STARTED)
  createdAt  DateTime   @default(now())
  resultDate DateTime?
  timeLimit  Int        @default(30)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  totalMCQ   Int
  totalMarks Int

  grades Grade[] // ✅ Many-to-many with Grade

  attendance    Attendance[]
  registrations ExamOnRegistration[]
  results       Result[]
  quizzes       Quiz?

  announcements Announcement[] @relation("AnnouncementExams") // ✅ Add this

  @@index([categoryId], map: "Exam_categoryId_fkey")
  @@index([subjectId], map: "Exam_subjectId_fkey")
}

model Quiz {
  id             String   @id @default(cuid())
  title          String
  category       String
  subject        String
  totalQuestions Int      @map("total_questions")
  totalMarks     Int      @map("total_marks")
  startDateTime  DateTime @map("start_date_time")
  endDateTime    DateTime @map("end_date_time")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  examId         String   @unique
  timeLimit      Int      @default(30)

  questions   Question[]
  QuizAttempt QuizAttempt[]
  exam        Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)

  grades String?

  @@index([examId], map: "quizzes_examId_fkey")
  @@map("quizzes")
}

model Question {
  id            String           @id @default(cuid())
  quizId        String           @map("quiz_id")
  type          QuestionType
  text          String
  marks         Float
  correctAnswer String?          @map("correct_answer") @db.Text
  orderIndex    Int              @map("order_index")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  Answer        Answer[]
  options       QuestionOption[]
  quiz          Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId], map: "questions_quiz_id_fkey")
  @@map("questions")
}

model QuestionOption {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  text       String
  isCorrect  Boolean  @map("is_correct")
  orderIndex Int      @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  Answer     Answer[]
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId], map: "question_options_question_id_fkey")
  @@map("question_options")
}

model Result {
  id                Int          @id @default(autoincrement())
  totalScore        Int
  score             Int
  grade             String
  status            ResultStatus @default(NOT_GRADED)
  gradedAt          DateTime?
  startTime         DateTime
  endTime           DateTime
  examId            String?
  studentId         String
  answeredQuestions Int          @default(0)
  correctAnswers    Int          @default(0)
  quizAttemptId     String?
  resultDeclared    Boolean      @default(false)
  declaredOn        DateTime?
  exam              Exam?        @relation(fields: [examId], references: [id], onDelete: Cascade)
  quizAttempt       QuizAttempt? @relation(fields: [quizAttemptId], references: [id])
  student           Student      @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)

  @@unique([examId, studentId])
  @@index([examId], map: "Result_examId_fkey")
  @@index([quizAttemptId], map: "Result_quizAttemptId_fkey")
  @@index([studentId], map: "Result_studentId_fkey")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  examId    String?
  exam      Exam?    @relation(fields: [examId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [cnicNumber], onDelete: Cascade)

  @@index([examId], map: "Attendance_examId_fkey")
  @@index([studentId], map: "Attendance_studentId_fkey")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
}

model Announcement {
  id               Int              @id @default(autoincrement())
  title            String
  description      String           @db.Text
  date             DateTime         @default(now())
  createdAt        DateTime         @default(now())
  resultDate       DateTime?
  announcementType AnnouncementType
  isForAll         Boolean          @default(false)

  grades Grade[] @relation("AnnouncementGrades") // ✅ Connected to Grade
  exams  Exam[]  @relation("AnnouncementExams") // ✅ Connected to Exam
}

enum AnnouncementType {
  GENERAL
  EXAM_RESULT
}

enum RegistrationStatus {
  APPROVED
  PENDING
  REJECTED
}

enum QuestionType {
  MULTIPLE_CHOICE @map("multiple_choice")
  TRUE_FALSE      @map("true_false")
  SHORT_TEXT      @map("short_text")
  LONG_TEXT       @map("long_text")
  NUMERICAL       @map("numerical")
}

enum ResultStatus {
  NOT_GRADED
  PASSED
  FAILED
  ABSENT
}

enum ExamStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Notification {
  id        Int              @id @default(autoincrement())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  senderId     Int
  senderRole   UserRole // 'ADMIN' or 'STUDENT'
  receiverId   Int
  receiverRole UserRole // 'ADMIN' or 'STUDENT'

  sender   User @relation("SentNotifications", fields: [senderId], references: [id])
  receiver User @relation("ReceivedNotifications", fields: [receiverId], references: [id])
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  role       UserRole
  cnicNumber String?  @unique // ✅ Add this line

  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")

  student Student? @relation("StudentToUser")

  // ✅ Add this back-relation to ChatParticipant
  chatParticipants ChatParticipant[]

  // 👇 Messages where this user is sender
  sentMessages Message[] @relation("MessageSender")

  // 👇 Messages where this user is receiver (for direct chats)
  receivedMessages Message[] @relation("MessageReceiver")

  // 👇 Add this for the relation to GroupChat.createdBy
  createdGroups GroupChat[] @relation("CreatedGroups")
}

enum NotificationType {
  GENERAL
  EXAM_CREATED
  RESULT_ANNOUNCED
  PAYMENT_APPROVED
  PAYMENT_REJECTED
  QUIZ_APPLIED
  STUDENT_REGISTERED
}

enum UserRole {
  admin
  student
}

model Chat {
  id        Int      @id @default(autoincrement())
  name      String? // Optional, for group chats
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ChatParticipant[]
  messages     Message[] // ✅ Relation defined via `chatId` in Message
  group        GroupChat?       
}

model ChatParticipant {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  joinedAt DateTime @default(now())

  // 👇 Reverse side of GroupParticipants
  group    GroupChat? @relation("GroupParticipants", fields: [groupId], references: [id])
  groupId  Int?

  @@unique([userId, chatId]) // Prevent duplicate entries
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId  Int

  receiver   User? @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId Int?

  // Add this relation to fix the error
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  // Optional for group messages
  group   GroupChat? @relation("GroupMessages", fields: [groupId], references: [id]) // 👈 matching relation name
  groupId Int?

  chatType ChatType
  isRead     Boolean    @default(false) // ✅ Add this
}

enum ChatType {
  STUDENT
  GROUP
}

model GroupChat {
  id           Int               @id @default(autoincrement())
  name         String
  createdById  Int
  createdBy    User              @relation("CreatedGroups", fields: [createdById], references: [id])

  chat         Chat              @relation(fields: [chatId], references: [id])
  chatId       Int               @unique

    // Relation to participants
  participants ChatParticipant[] @relation("GroupParticipants")
  messages     Message[]         @relation("GroupMessages") // 👈 add a relation name
}
