generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id             String
  name           String?
  fatherName     String?
  dateOfBirth    DateTime
  religion       String?
  gender         String?
  cnicNumber     String         @unique
  profilePicture String?
  email          String?
  mobileNumber   String?
  city           String?
  stateProvince  String?
  addressLine1   String?
  instituteName  String?
  others         String?
  rollNo         String?
  Result         Result[]
  Attendance     Attendance[]
  Registration   Registration[]
  attempts       QuizAttempt[]
}

model Category {
  id      Int     @id @default(autoincrement())
  catName String  @unique
  Grade   Grade[]
  Exam    Exam[]
}

model QuizAttempt {
  id          String    @id @default(uuid())
  student     Student   @relation(fields: [studentId], references: [cnicNumber])
  studentId   String
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  quizId      String
  answers     Answer[]
  score       Int?
  startedAt   DateTime  @default(now())
  submittedAt DateTime?
}

model Answer {
  id               String      @id @default(uuid())
  attempt          QuizAttempt @relation(fields: [attemptId], references: [id])
  attemptId        String
  question         Question    @relation(fields: [questionId], references: [id])
  questionId       String
  selectedOption   Option?     @relation(fields: [selectedOptionId], references: [id])
  selectedOptionId String?
  responseText     String? // For open-ended/numerical responses
  responseNumber   Float? // For numerical answers
}

model Grade {
  id         Int      @id @default(autoincrement())
  level      String   @unique
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  Exam Exam[]
}

enum RegistrationStatus {
  APPROVED
  PENDING
  REJECTED
}

model Registration {
  id                 Int                  @id @default(autoincrement())
  olympiadCategory   String?
  catGrade           String?
  bankName           String?
  accountTitle       String?
  accountNumber      String?
  totalAmount        String?
  transactionId      String?
  dateOfPayment      DateTime
  paymentOption      String?
  otherName          String?
  transactionReceipt String?
  applicationId      String?
  status             RegistrationStatus // <- enum used here
  studentId          String
  student            Student              @relation(fields: [studentId], references: [cnicNumber])
  registerdAt        DateTime             @default(now())
  exams              ExamOnRegistration[]
}

model ExamOnRegistration {
  examId         String
  registrationId Int

  exam         Exam         @relation(fields: [examId], references: [id])
  registration Registration @relation(fields: [registrationId], references: [id])

  @@id([examId, registrationId]) // composite primary key
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique
  Exam Exam[]
}



enum AnswerFormat {
  multiple_choice
  short_text
  long_text
  numerical
  true_false
}

model Exam {
  id        String     @id @default(uuid())
  title     String
  startTime DateTime
  endTime   DateTime
  status    ExamStatus @default(NOT_STARTED)
  createdAt DateTime   @default(now())

  categoryId    Int
  category      Category             @relation(fields: [categoryId], references: [id])
  gradeId       Int
  grade         Grade                @relation(fields: [gradeId], references: [id])
  subjectId     Int
  subject       Subject              @relation(fields: [subjectId], references: [id])
  totalMCQ      Int
  totalMarks    Int
  results       Result[]
  attendance    Attendance[]
  registrations ExamOnRegistration[]
  quizzes       Quiz[]
}

model Quiz {
  id          String        @id @default(uuid())
  title       String
  exam        Exam          @relation(fields: [examId], references: [id])
  examId      String
  questions   Question[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  QuizAttempt QuizAttempt[]
}

model Question {
  id        String        @id @default(uuid())
  text      String
  quiz      Quiz          @relation(fields: [quizId], references: [id])
  quizId    String
  options   Option[]      // For MCQ/True-False; empty for open-ended
  answer    String?       // Optional correct answer text or key
  format    AnswerFormat
  marks     Float           // Marks awarded for the question
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Answer    Answer[]
}


model Option {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  Answer     Answer[]
}

enum ResultStatus {
  NOT_GRADED // Exam submitted, but not yet graded
  PASSED // Student passed the exam
  FAILED // Student failed the exam
  ABSENT // Student did not attend the exam
}

model Result {
  id        Int          @id @default(autoincrement())
  score     Int
  status    ResultStatus @default(NOT_GRADED)
  gradedAt  DateTime?
  startTime DateTime
  endTime   DateTime

  examId    String?
  exam      Exam?   @relation(fields: [examId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [cnicNumber])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [cnicNumber])
  examId    String?
  exam      Exam?   @relation(fields: [examId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
}

enum ExamStatus {
  NOT_STARTED // Exam has been scheduled but not yet started
  IN_PROGRESS // Exam is currently being taken
  COMPLETED // Exam has been finished by the participant
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
